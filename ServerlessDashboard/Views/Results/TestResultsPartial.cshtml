@model ServerlessDashboard.Models.TestResultsModel
@{
    var containerName = "flot-" + Model.Id;
    var dataPollUrl = @"getNewData/" + Model.Id;
    var viewTimespanInMinutes = Model.ViewTimespanInMinutes;
    var totalCountMetricName = "TotalCount";
    var successCountMetricName = "SuccessCount";
    var failedCountMetricName = "FailedCount";
    var timeoutCountMetricName = "TimeoutCount";
    var averageLatencyMetricName = "AverageLatency";
}

<div id="test-@Model.Id">
    <hr />

    <table>
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.Name)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.StartTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.EndTime)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Platform)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Description)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TotalExecutionRequests)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.SucceededExecutions)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.FailedExecutions)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TimeoutExecutions)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.AverageLatency)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Owner)
                </th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>
                    @Html.DisplayFor(model => model.Name)
                </td>
                <td>
                    @Html.DisplayFor(model => model.StartTime)
                </td>
                <td>
                    @Html.DisplayFor(model => model.EndTime)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Platform)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Description)
                </td>
                <td class="totalExecutions">
                    @Html.DisplayFor(model => model.TotalExecutionRequests)
                </td>
                <td class="succededExecutions">
                    @Html.DisplayFor(model => model.SucceededExecutions)
                </td>
                <td class="failedExecutions">
                    @Html.DisplayFor(model => model.FailedExecutions)
                </td>
                <td class="timeoutExecutions">
                    @Html.DisplayFor(model => model.TimeoutExecutions)
                </td>
                <td class="averageLatency">
                    @Html.DisplayFor(model => model.AverageLatency)
                </td>
                <td>
                    @Html.DisplayFor(model => model.Owner)
                </td>
            </tr>
        </tbody>
    </table>

<div id="legend-@containerName" style="float: left; padding: 15px 30px ">

    </div>
    <div id="@containerName" style="border: 1px solid black; width: 1300px; height: 400px;">

    </div>

    <script type="text/javascript">
    function getUtcNow() {
        var now = new Date();
        return new Date(now.getTime());
    }

    $(function() {
        // Set up the control widget
        var updateInterval = 1000;
        var plot = $.plot("#@containerName", [ ], {
            series: {
                shadowSize: 0	// Drawing is faster without shadows
            },
            yaxis: [{
                min: 0,
                position: "left",
                alignTicksWithAxis: null
            },
            {
                position: "right",
                alignTicksWithAxis: 1
            }],
            xaxis: {
                show: true,
                mode: "time",
                timezone: "UTC"
            },
            legend: {
                show: true, 
                placement: 'outsideGrid', 
                container: $('#legend-@containerName')
            }
        });

        var totalCountMetricName = '@totalCountMetricName';
        var successCountMetricName = '@successCountMetricName';
        var failedCountMetricName = '@failedCountMetricName';
        var timeoutCountMetricName = '@timeoutCountMetricName';
        var averageLatencyMetricName = '@averageLatencyMetricName';

        var totalRequestsCount = 0;
        var successRequestCount = 0;
        var failedRequestCount = 0;
        var timeoutRequestCount = 0;
        var averageLatency = 0.0;
        // We use an inline data source in the example, usually data would
        // be fetched from a server
        var dataCache = [];
        dataCache.push({ label: totalCountMetricName, data: [] });
        dataCache.push({ label: successCountMetricName, data: [] });
        dataCache.push({ label: failedCountMetricName, data: [] });
        dataCache.push({ label: timeoutCountMetricName, data: [] });
        dataCache.push({ label: averageLatencyMetricName, data: [], yaxis: 2 });
        var lastPoll = getUtcNow();
        lastPoll = lastPoll.setMinutes(lastPoll.getMinutes() - @viewTimespanInMinutes);

        function plotNewData(callback) {
            var url = "@dataPollUrl" + "/" + escape(dateFormat(lastPoll, "yyyy-mm-dd HH!MM!ss"));
            lastPoll = getUtcNow();
            $.get(url, callback);
        }

        function getPlotValues(a, b) {
            return a + b[1];
        }

        function update() {
            plotNewData(function(data) {

                for (var i = 0; i < dataCache.length; i++) {
                    var serie = dataCache[i];
                    if (serie.label == totalCountMetricName) {
                        serie.data = serie.data.concat(data[totalCountMetricName]);
                        totalRequestsCount += data[totalCountMetricName].reduce(getPlotValues, 0);
                        $("#test-@Model.Id" + " td.totalExecutions").text(totalRequestsCount);
                    } else if (serie.label == successCountMetricName) {
                        serie.data = serie.data.concat(data[successCountMetricName]);
                        successRequestCount += data[successCountMetricName].reduce(getPlotValues, 0);
                        $("#test-@Model.Id" + " td.succededExecutions").text(successRequestCount);
                    } else if (serie.label == failedCountMetricName) {
                        serie.data = serie.data.concat(data[failedCountMetricName]);
                        failedRequestCount += data[failedCountMetricName].reduce(getPlotValues, 0);
                        $("#test-@Model.Id" + " td.failedExecutions").text(failedRequestCount);
                    } else if (serie.label == timeoutCountMetricName) {
                        serie.data = serie.data.concat(data[timeoutCountMetricName]);
                        timeoutRequestCount += data[timeoutCountMetricName].reduce(getPlotValues, 0);
                        $("#test-@Model.Id" + " td.timeoutExecutions").text(timeoutRequestCount);
                    } else if (serie.label == averageLatencyMetricName) {
                        serie.data = serie.data.concat(data[averageLatencyMetricName]);
                        averageLatency = (serie.data.reduce(getPlotValues, 0)) / serie.data.length;
                        $("#test-@Model.Id" + " td.averageLatency").text(averageLatency);
                    }
                }

                console.log(dataCache);
                plot.setData(dataCache);
                plot.getOptions().xaxes[0].max = (getUtcNow()).getTime();
                var minDateToShow = getUtcNow();
                minDateToShow = minDateToShow.setMinutes(minDateToShow.getMinutes() - @viewTimespanInMinutes);
                plot.getOptions().xaxes[0].min = minDateToShow;
                plot.setupGrid();
                plot.draw();
            });
            
            setTimeout(update, updateInterval);
        }

        update();
    });
    </script>
</div>